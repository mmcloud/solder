// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/mmcloud/solder/pkg/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// LoggerFactory is an autogenerated mock type for the LoggerFactory type
type LoggerFactory struct {
	mock.Mock
}

// GetLogger provides a mock function with given fields:
func (_m *LoggerFactory) GetLogger() (interfaces.Logger, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 interfaces.Logger
	var r1 error
	if rf, ok := ret.Get(0).(func() (interfaces.Logger, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interfaces.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Logger)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggerConfig provides a mock function with given fields:
func (_m *LoggerFactory) GetLoggerConfig() interfaces.LoggingConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoggerConfig")
	}

	var r0 interfaces.LoggingConfig
	if rf, ok := ret.Get(0).(func() interfaces.LoggingConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.LoggingConfig)
		}
	}

	return r0
}

// NewLoggerFactory creates a new instance of LoggerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoggerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoggerFactory {
	mock := &LoggerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
