// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	constants "github.com/mmcloud/solder/pkg/constants"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg
func (_m *Service) Debug(msg string) {
	_m.Called(msg)
}

// Debugf provides a mock function with given fields: format, args
func (_m *Service) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg
func (_m *Service) Error(msg string) {
	_m.Called(msg)
}

// Errorf provides a mock function with given fields: format, args
func (_m *Service) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: msg
func (_m *Service) Fatal(msg string) {
	_m.Called(msg)
}

// Fatalf provides a mock function with given fields: format, args
func (_m *Service) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// GetLevel provides a mock function with given fields:
func (_m *Service) GetLevel() constants.Level {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLevel")
	}

	var r0 constants.Level
	if rf, ok := ret.Get(0).(func() constants.Level); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(constants.Level)
	}

	return r0
}

// GetLoggerKind provides a mock function with given fields:
func (_m *Service) GetLoggerKind() constants.LoggerKind {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoggerKind")
	}

	var r0 constants.LoggerKind
	if rf, ok := ret.Get(0).(func() constants.LoggerKind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(constants.LoggerKind)
	}

	return r0
}

// GetLong provides a mock function with given fields:
func (_m *Service) GetLong() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLong")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Service) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetShort provides a mock function with given fields:
func (_m *Service) GetShort() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShort")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Info provides a mock function with given fields: msg
func (_m *Service) Info(msg string) {
	_m.Called(msg)
}

// Infof provides a mock function with given fields: format, args
func (_m *Service) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Long provides a mock function with given fields:
func (_m *Service) Long() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Long")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Service) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *Service) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLevel provides a mock function with given fields: level
func (_m *Service) SetLevel(level constants.Level) {
	_m.Called(level)
}

// Short provides a mock function with given fields:
func (_m *Service) Short() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Short")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *Service) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Warn provides a mock function with given fields: msg
func (_m *Service) Warn(msg string) {
	_m.Called(msg)
}

// Warnf provides a mock function with given fields: format, args
func (_m *Service) Warnf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
