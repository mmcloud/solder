// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cobra "github.com/spf13/cobra"

	mock "github.com/stretchr/testify/mock"
)

// Commander is an autogenerated mock type for the Commander type
type Commander struct {
	mock.Mock
}

// AddCommand provides a mock function with given fields: cmd
func (_m *Commander) AddCommand(cmd *cobra.Command) {
	_m.Called(cmd)
}

// ExecuteContext provides a mock function with given fields: ctx
func (_m *Commander) ExecuteContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommander creates a new instance of Commander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *Commander {
	mock := &Commander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
